{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nconst isTokenExpired = () => {\n  try {\n    let token = localStorage.getItem(\"token\");\n    if (token = null) return false;\n    const decoded = jwtDecode(token);\n    console.log(decoded.exp < Math.floor(Date.now / 1000));\n    return decoded.exp < Math.floor(Date.now / 1000);\n  } catch (error) {\n    console.error('Invalid token:', error);\n    return true;\n  }\n};\nexport default isTokenExpired;","map":{"version":3,"names":["jwtDecode","isTokenExpired","token","localStorage","getItem","decoded","console","log","exp","Math","floor","Date","now","error"],"sources":["D:/medicine/frontend/src/isTokenExpired.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\"\r\n\r\nconst isTokenExpired = () => {\r\n    try {\r\n        let token = localStorage.getItem(\"token\");\r\n        if (token = null) return false;\r\n        const decoded = jwtDecode(token);\r\n        console.log(decoded.exp < Math.floor(Date.now / 1000));\r\n        return decoded.exp < Math.floor(Date.now / 1000);\r\n    } catch (error) {\r\n        console.error('Invalid token:', error);\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default isTokenExpired;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAEtC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,IAAI;IACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAIF,KAAK,GAAG,IAAI,EAAE,OAAO,KAAK;IAC9B,MAAMG,OAAO,GAAGL,SAAS,CAACE,KAAK,CAAC;IAChCI,OAAO,CAACC,GAAG,CAACF,OAAO,CAACG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,GAAG,IAAI,CAAC,CAAC;IACtD,OAAOP,OAAO,CAACG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,GAAG,IAAI,CAAC;EACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,IAAI;EACf;AACJ,CAAC;AAED,eAAeZ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}