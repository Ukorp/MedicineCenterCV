{"ast":null,"code":"import _isValidNumber from '../isValid.js';\nimport { normalizeArguments } from './getNumberType.js'; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function isValidNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    input = _normalizeArguments.input,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata; // `parseNumber()` would return `{}` when no phone number could be parsed from the input.\n\n  if (!input.phone) {\n    return false;\n  }\n  return _isValidNumber(input, options, metadata);\n}","map":{"version":3,"names":["_isValidNumber","normalizeArguments","isValidNumber","_normalizeArguments","arguments","input","options","metadata","phone"],"sources":["D:\\medicine\\frontend\\node_modules\\libphonenumber-js\\source\\legacy\\isValidNumber.js"],"sourcesContent":["import _isValidNumber from '../isValid.js'\r\nimport { normalizeArguments } from './getNumberType.js'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function isValidNumber() {\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\t// `parseNumber()` would return `{}` when no phone number could be parsed from the input.\r\n\tif (!input.phone) {\r\n\t\treturn false\r\n\t}\r\n\treturn _isValidNumber(input, options, metadata)\r\n}"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,eAA3B;AACA,SAASC,kBAAT,QAAmC,oBAAnC,C,CAEA;;AACA,eAAe,SAASC,aAATA,CAAA,EAAyB;EACvC,IAAAC,mBAAA,GAAqCF,kBAAkB,CAACG,SAAD,CAAvD;IAAQC,KAAR,GAAAF,mBAAA,CAAQE,KAAR;IAAeC,OAAf,GAAAH,mBAAA,CAAeG,OAAf;IAAwBC,QAAxB,GAAAJ,mBAAA,CAAwBI,QAAxB,CADuC,CAEvC;;EACA,IAAI,CAACF,KAAK,CAACG,KAAX,EAAkB;IACjB,OAAO,KAAP;EACA;EACD,OAAOR,cAAc,CAACK,KAAD,EAAQC,OAAR,EAAiBC,QAAjB,CAArB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}