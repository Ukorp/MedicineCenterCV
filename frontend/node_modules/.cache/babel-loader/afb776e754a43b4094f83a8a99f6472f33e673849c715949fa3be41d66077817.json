{"ast":null,"code":"var _jsxFileName = \"D:\\\\medicine\\\\frontend\\\\src\\\\HelloPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport apiClient from './apiClient'; // Убедитесь, что путь к apiClient правильный\nimport LogoutButton from './LogoutButton'; // Импортируйте компонент LogoutButton\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HelloPage = props => {\n  _s();\n  const [user, setUser] = useState(null); // Состояние для хранения данных пользователя\n  const [error, setError] = useState(null); // Состояние для хранения ошибок\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await apiClient.get(\"/api/v1/user/info\");\n        setUser(response.data); // Устанавливаем данные пользователя в состояние\n      } catch (err) {\n        console.error(\"Ошибка при получении данных пользователя:\", err);\n        setError(err.message); // Устанавливаем сообщение об ошибке в состояние\n      }\n    };\n    fetchUserData(); // Вызываем функцию для получения данных\n  }, []); // Пустой массив зависимостей означает, что эффект выполнится только один раз при монтировании компонента\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this); // Отображаем сообщение об ошибке\n  }\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this); // Отображаем индикатор загрузки, пока данные не получены\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u043A\\u0443\\u0440\\u0441\\u0430\\u0447\\u0443 \\u043F\\u043E\\u043B\\u043E\\u0436\\u0435\\u043D\\u043E, \", user.firstName, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(HelloPage, \"FoT8xzvemVmWV60BhcL+ltjm2pQ=\");\n_c = HelloPage;\nexport default HelloPage;\nvar _c;\n$RefreshReg$(_c, \"HelloPage\");","map":{"version":3,"names":["React","useEffect","useState","apiClient","LogoutButton","jsxDEV","_jsxDEV","Fragment","_Fragment","HelloPage","props","_s","user","setUser","error","setError","fetchUserData","response","get","data","err","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","firstName","_c","$RefreshReg$"],"sources":["D:/medicine/frontend/src/HelloPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport apiClient from './apiClient'; // Убедитесь, что путь к apiClient правильный\r\nimport LogoutButton from './LogoutButton'; // Импортируйте компонент LogoutButton\r\n\r\nconst HelloPage = (props) => {\r\n    const [user, setUser] = useState(null); // Состояние для хранения данных пользователя\r\n    const [error, setError] = useState(null); // Состояние для хранения ошибок\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const response = await apiClient.get(\"/api/v1/user/info\");\r\n                setUser(response.data); // Устанавливаем данные пользователя в состояние\r\n            } catch (err) {\r\n                console.error(\"Ошибка при получении данных пользователя:\", err);\r\n                setError(err.message); // Устанавливаем сообщение об ошибке в состояние\r\n            }\r\n        };\r\n\r\n        fetchUserData(); // Вызываем функцию для получения данных\r\n    }, []); // Пустой массив зависимостей означает, что эффект выполнится только один раз при монтировании компонента\r\n\r\n    if (error) {\r\n        return <h1>Ошибка: {error}</h1>; // Отображаем сообщение об ошибке\r\n    }\r\n\r\n    if (!user) {\r\n        return <h1>Загрузка...</h1>; // Отображаем индикатор загрузки, пока данные не получены\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Начало курсачу положено, {user.firstName}!</h1>\r\n            <LogoutButton />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HelloPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AACrC,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CD,SAAS,CAAC,MAAM;IACZ,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMd,SAAS,CAACe,GAAG,CAAC,mBAAmB,CAAC;QACzDL,OAAO,CAACI,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACP,KAAK,CAAC,2CAA2C,EAAEM,GAAG,CAAC;QAC/DL,QAAQ,CAACK,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC;MAC3B;IACJ,CAAC;IAEDN,aAAa,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIF,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAAiB,QAAA,GAAI,wCAAQ,EAACT,KAAK;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EACrC;EAEA,IAAI,CAACf,IAAI,EAAE;IACP,oBAAON,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC,CAAC;EACjC;EAEA,oBACIrB,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,GAAI,oIAAyB,EAACX,IAAI,CAACgB,SAAS,EAAC,GAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnDrB,OAAA,CAACF,YAAY;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAClB,CAAC;AAEX,CAAC;AAAChB,EAAA,CAhCIF,SAAS;AAAAoB,EAAA,GAATpB,SAAS;AAkCf,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}